

const express = require("express");
const axios = require("axios").default;
const { v4: uuidv4, stringify } = require("uuid");
const app = express();
const port = 8080;
const bodyParser = require("body-parser");
//const config = require("config");
app.use(bodyParser.json());
const jsonParser = bodyParser.json();

const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");
const cors = require("cors");

const options = {
  swaggerDefinition: {
    info: {
      title: "Text Translator API",
      version: "1.0.0",
      description: "Text Translator API autogenerated by Swagger",
    },
    host: "137.184.25.239:8080",
    basePath: "/",
  },
  apis: ["./server.js"],
};





const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());
const { check, validationResult, body } = require("express-validator");



// Text Translation and detection of language code for input text with Profanity Marking

/**
 * @swagger
 * definitions:
 *   Translate:
 *     properties:
 *       text:
 *         type: string
 *         description: Input text to be translated
 *       to:
 *         type: string
 *         description: Language code of the language the text is to be translated in
 */
/**
/**
 * @swagger
 * /api/translate:
 *        post:
 *          description: Translate input text       
 *          produces:
 *            - application/json
 *          responses:
 *            200:
 *              description: Text Translated
 *            400:
 *              description: Request failed with status code 400
 *          parameters:
 *            - name: Translate
 *              description: Translation Object
 *              in: body
 *              required: true
 *              schema: 
 *                $ref: '#/definitions/Translate'
 */
app.post(
  "/api/translate",
  jsonParser,
  [
    check("text")
      .trim()
      .not()
      .isEmpty()
      .isString()
      .withMessage("Please enter valid text"),
    check("to")
      .trim()
      .not()
      .isEmpty()
      .isString()
      .withMessage("Please enter valid language code"),
  ],
  async (req, res) => {
    var translate = [
      {
        detectedLanguage: {},
        translations: [{}],
      },
    ];
    axios({
      baseURL: "https://api.cognitive.microsofttranslator.com/",
      url: "/translate",
      method: "post",
      headers: {
        "Ocp-Apim-Subscription-Key": "c4c8675b316a4db497fc47f34d13207c",
        "Ocp-Apim-Subscription-Region": "eastus",
        "Content-type": "application/json",
        "X-ClientTraceId": uuidv4().toString(),
      },
      params: {
        "api-version": "3.0",
        to: req.body.to,
        profanityAction: "Marked",
      },
      data: [
        {
          text: req.body.text,
        },
      ],
      responseType: "json",
    })
      .then(function (response) {
        console.log(JSON.stringify(req.body))
        for (var i = 0; i < response.data.length; i++) {
          translate[0].detectedLanguage.language =
            response.data[0].detectedLanguage.language;
          translate[0].detectedLanguage.score =
            response.data[0].detectedLanguage.score;
          translate[0].translations = response.data[i].translations;
        }
        res.status(200).json(translate, null, 4);
      })
      .catch((err) => {
        if (!req.body.text)
          res.status(400).json(err.message + " Missing attribute 'text'");
        if (!req.body.to)
          res.status(400).json(err.message + ": Missing attribute 'to'");
        res.status(400).json(err.message);
      });
  }
);

     
app.listen(port, () => {
  console.log(`API deployed on ${port}`);
});





