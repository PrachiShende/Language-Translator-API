const express = require("express");
const app = express();
const port = 3000;
const axios = require("axios").default;
const { v4: uuidv4, stringify } = require("uuid");
const bodyParser = require("body-parser");
const config = require("./default.json");
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
const jsonParser = bodyParser.json();

const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");
const cors = require("cors");

const options = {
    swaggerDefinition: {
        info: {
            title: "Text Translator API",
            version: "1.0.0",
            description: "Text Translator API documentation autogenerated by Swagger",
        },
        host: "137.184.25.239:3000",
        basePath: "/",
    },
    apis: ["./index.js"],
};

const specs = swaggerJsdoc(options);
app.use("/doc", swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());
const { check, validationResult, body } = require("express-validator");

app.get("/", (req, res) => {
    res.send('API documentation- http://137.184.25.239:3000/doc');
});



// Text Translation and detection of language code for input text with Profanity Marking
/**
/**
 * @swagger
 * definitions:
 *   Translate:
 *     properties:
 *       text:
 *         type: string
 *         description: Input text to be translated
 *       to:
 *         type: string
 *         description: Language code of the language the text is to be translated in
 */

/**
 * @swagger
 * /api.v1.TextTranslator.com/Translate:
 *        post:
 *          tags:
 *            - "TranslatorAPI"
 *          description: Translate and Detect input text       
 *          produces:
 *            - application/json
 *          parameters:
 *            - name: Translate
 *              description: text translation
 *              in: body
 *              required: true
 *              schema: 
 *                $ref: '#/definitions/Translate'
 *          responses:
 *            200:
 *              description: Success operation!
 *            400:
 *              description: Error!
 */

app.post(
    "/api.v1.TextTranslator.com/Translate",
    jsonParser,
    [
        check("text")
            .trim()
            .escape()
            .not()
            .isEmpty()
            .isString()
            .withMessage("Please enter valid text"),
        check("to")
            .trim()
            .escape()
            .not()
            .isEmpty()
            .isString()
            .withMessage("Please enter valid 'to'"),
    ],
    async (req, res) => {
        axios({
            baseURL: "https://api.cognitive.microsofttranslator.com/",
            url: "/translate?profanityAction=Marked",
            method: "post",
            headers: {
                "Ocp-Apim-Subscription-Key": "c4c8675b316a4db497fc47f34d13207c",
                "Ocp-Apim-Subscription-Region": "eastus",
                "Content-type": "application/json",
                "X-ClientTraceId": uuidv4().toString(),
            },
            params: {
                "api-version": "3.0",
                to: req.body.to,
                profanityAction: 'Marked',                
            },
            data: [
                {
                    text: req.body.text,
                },
            ],
            
            responseType: "json",
        }).then(function (response) {
            res.status(200).json(response.data, null, 4);
            
        }).catch((ex) => {
            if (!req.body.text)
                res.status(400).json(ex.message + " : Missing parameter 'text'");
            if (!req.body.to)
                res.status(400).json(ex.message + ": Missing parameter 'to'");
            res.status(400).json(ex.message);
            
        });
    }
);




app.listen(port, () => {
    console.log(`Server is running and listening at http://localhost:${port}`);
});
